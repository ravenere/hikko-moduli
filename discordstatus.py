# ---------------------------------------------------------------------------------
# Name: DiscordStatus
# Description: –ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Discord RPC (–±–æ—Ç [_b] (–æ–±—â–∏–π —Å–µ—Ä–≤–µ—Ä) + –∫–ª–∏–µ–Ω—Ç [_c] (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥—Ä—É–∑—å—è—Ö.
# requires: discord.py==2.5.2
# ---------------------------------------------------------------------------------

from hikkatl.types import Message
from .. import loader, utils
import discord
from discord.ext import commands
import asyncio
import time
import logging

logger = logging.getLogger(__name__)

@loader.tds
class DiscordStatusCombinedMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Discord RPC (–±–æ—Ç [_b] (–æ–±—â–∏–π —Å–µ—Ä–≤–µ—Ä) + –∫–ª–∏–µ–Ω—Ç [_c] (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥—Ä—É–∑—å—è—Ö))"""
    strings = {"name": "DiscordStatusCombined"}

    def __init__(self):
        self.bot = None
        self.client = None
        self.bot_ready = False
        self._client_ready = False
        self.config = loader.ModuleConfig(
            "DISCORD_BOT_TOKEN", None, lambda: "–¢–æ–∫–µ–Ω Discord –±–æ—Ç–∞ (–¥–ª—è .dcs_b)",
            "DISCORD_USER_TOKEN", None, lambda: "–¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Discord (–¥–ª—è .dcs_c)",
        )

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        if self.config["DISCORD_BOT_TOKEN"]:
            try:
                await self.start_bot()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        if self.config["DISCORD_USER_TOKEN"]:
            try:
                await self.start_client()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞ (–¥–ª—è .dcs_b)"""
        intents = discord.Intents.default()
        intents.presences = True
        intents.members = True

        self.bot = commands.Bot(command_prefix="!", intents=intents, self_bot=False) # –ø—Ä–µ—Ñ–∏–∫—Å –ù–ï –Æ–ó–ï–†–ë–û–¢–ê! –ª—É—á—à–µ –Ω–µ –º–µ–Ω—è—Ç—å
        
        @self.bot.event
        async def on_ready():
            self.bot_ready = True
            logger.info(f"Discord –±–æ—Ç –≥–æ—Ç–æ–≤: {self.bot.user.name}")

        asyncio.create_task(self.bot.start(self.config["DISCORD_BOT_TOKEN"]))

    async def start_client(self):
        """–ó–∞–ø—É—Å–∫ Discord –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è .dcs_c)"""
        intents = discord.Intents.all()
        self.client = discord.Client(intents=intents)

        @self.client.event
        async def on_ready():
            self._client_ready = True
            logger.info(f"Discord –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤: {self.client.user.name}")

        asyncio.create_task(self.client.start(
            self.config["DISCORD_USER_TOKEN"], 
            bot=False
        ))

    async def dcs_b_cmd(self, message: Message):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (—Å–µ—Ä–≤–µ—Ä—ã). –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .dcs_b <ID/@—Ç–µ–≥>"""
        if not self.bot_ready:
            await utils.answer(message, "‚ùå Discord –±–æ—Ç –Ω–µ –≥–æ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω!")
            return

        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        try:
            user = await self.parse_user(args, bot_mode=True)
            if not user:
                await utils.answer(message, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –æ–±—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö")
                return

            status = await self.get_user_status(user, bot_mode=True)
            await utils.answer(message, status)

        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def dcs_c_cmd(self, message: Message):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–∞ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .dcs_c <ID/–∏–º—è>"""
        if not self._client_ready:
            await utils.answer(message, "‚ùå Discord –∫–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω!")
            return

        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ –∏–º—è –¥—Ä—É–≥–∞")
            return

        try:
            user = await self.parse_user(args, bot_mode=False)
            if not user:
                await utils.answer(message, "‚ùå –î—Ä—É–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            status = await self.get_user_status(user, bot_mode=False)
            await utils.answer(message, status)

        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def parse_user(self, args: str, bot_mode: bool) -> discord.User | None:
        """–ü–∞—Ä—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
        if bot_mode:
            try:
                user_id = int(args)
                return await self.bot.fetch_user(user_id)
            except ValueError:
                if args.startswith("<@") and args.endswith(">"):
                    user_id = int(args[2:-1].replace("!", ""))
                    return await self.bot.fetch_user(user_id)
            return None
        else:
            friends = self.client.user.friends
            return next((f for f in friends if f.name == args or str(f.id) == args), None)

    async def get_user_status(self, user: discord.User, bot_mode: bool) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º"""
        member = None
        if bot_mode:
            for guild in self.bot.guilds:
                member = guild.get_member(user.id)
                if member: break
        else:
            member = user

        if not member:
            return f"üë§ {user.name} (ID: {user.id})\nüü¢ –°—Ç–∞—Ç—É—Å: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω (–Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö)"

        status = member.status
        activities = member.activities
        rpc_activity = next((a for a in activities if a.type != discord.ActivityType.custom), None)

        base_text = f"üë§ `{user.name}`\nüü¢ –°—Ç–∞—Ç—É—Å: {status}\n"
        if not rpc_activity:
            return base_text + "üìå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"

        activity_type = {
            discord.ActivityType.playing: "üéÆ –ò–≥—Ä–∞–µ—Ç",
            discord.ActivityType.streaming: "üì∫ –°—Ç—Ä–∏–º–∏—Ç",
            discord.ActivityType.listening: "üéß –°–ª—É—à–∞–µ—Ç",
            discord.ActivityType.watching: "üëÄ –°–º–æ—Ç—Ä–∏—Ç"
        }.get(rpc_activity.type, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        elapsed = ""
        if rpc_activity.timestamps and rpc_activity.timestamps.start:
            elapsed_time = int(time.time() - rpc_activity.timestamps.start.timestamp())
            elapsed = f"‚è± {time.strftime('%H:%M:%S', time.gmtime(elapsed_time))}"

        return (f"{base_text}"
                f"**{activity_type}** –≤ ***{rpc_activity.name}***\n"
                f"‚ÑπÔ∏è {rpc_activity.details or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                f"üìù {rpc_activity.state or '–ù–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è'}\n"
                f"{elapsed}")

    async def on_unload(self):
        if self.bot and self.bot_ready:
            await self.bot.close()
        if self.client and self._client_ready:
            await self.client.disconnect()
